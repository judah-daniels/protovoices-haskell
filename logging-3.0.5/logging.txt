-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Simplified logging in IO for application writers.
--   
--   <tt>logging</tt> is a wrapper around <tt>fast-logger</tt> which makes
--   it easy to log from <a>IO</a>. It provides the following conveniences
--   on top of those libraries:
--   
--   <ul>
--   <li>A set of shorter functions to type: <a>debug</a>, <a>log</a>,
--   <a>warn</a>, plus others that flush after each message, or which allow
--   providing a message source string.</li>
--   <li>Logging variants of <a>error</a>, <a>trace</a> and
--   <a>traceShow</a>, called <a>errorL</a>, <a>traceL</a> and
--   <a>traceShowL</a>. These use <a>unsafePerformIO</a> in order to act as
--   direct replacements, so the usual caveats apply.</li>
--   <li>A global function, <a>setDebugLevel</a>, which uses a global
--   <a>IORef</a> to record the logging level, saving you from having to
--   carry around the notion of "verbosity level" in a Reader
--   environment.</li>
--   <li>A set of "timed" variants, <a>timedLog</a> and <a>timedDebug</a>,
--   which report how long the specified action took to execute in
--   wall-clock time.</li>
--   </ul>
@package logging
@version 3.0.5


-- | Quick example of how to use this module:
--   
--   <pre>
--   import Control.Logging
--   
--   main = withStdoutLogging $ do
--       log "This is a log message!"
--       timedLog "This is a timed log message!" $ threadDelay 100000
--   </pre>
module Control.Logging
log :: Text -> IO ()

-- | The apostrophe varients of the logging functions flush the log after
--   each message.
log' :: MonadIO m => Text -> m ()
logS :: Text -> Text -> IO ()
logS' :: MonadIO m => Text -> Text -> m ()
warn :: Text -> IO ()
warn' :: MonadIO m => Text -> m ()
warnS :: Text -> Text -> IO ()
warnS' :: MonadIO m => Text -> Text -> m ()
debug :: Text -> IO ()
debug' :: MonadIO m => Text -> m ()
debugS :: Text -> Text -> IO ()
debugS' :: MonadIO m => Text -> Text -> m ()

-- | A logging variant of <a>error</a> which uses <a>unsafePerformIO</a> to
--   output a log message before calling <a>error</a>.
errorL :: Text -> a
errorL' :: Text -> a
errorSL :: Text -> Text -> a
errorSL' :: Text -> Text -> a
traceL :: Text -> a -> a
traceL' :: Text -> a -> a
traceSL :: Text -> Text -> a -> a
traceSL' :: Text -> Text -> a -> a
traceShowL :: Show a => a -> a1 -> a1
traceShowL' :: Show a => a -> a1 -> a1
traceShowSL :: Show a => Text -> a -> a1 -> a1
traceShowSL' :: Show a => Text -> a -> a1 -> a1

-- | Output a logging message both before an action begins, and after it
--   ends, reporting the total length of time. If an exception occurred, it
--   is also reported.
timedLog :: (MonadBaseControl IO m, MonadIO m) => Text -> m a -> m a
timedLog' :: (MonadBaseControl IO m, MonadIO m) => Text -> m a -> m a
timedLogS :: (MonadBaseControl IO m, MonadIO m) => Text -> Text -> m a -> m a
timedLogS' :: (MonadBaseControl IO m, MonadIO m) => Text -> Text -> m a -> m a

-- | Like <a>timedLog</a>, except that it does only logs when the action
--   has completed or failed after it is done.
timedLogEnd :: (MonadBaseControl IO m, MonadIO m) => Text -> m a -> m a
timedLogEnd' :: (MonadBaseControl IO m, MonadIO m) => Text -> m a -> m a
timedLogEndS :: (MonadBaseControl IO m, MonadIO m) => Text -> Text -> m a -> m a
timedLogEndS' :: (MonadBaseControl IO m, MonadIO m) => Text -> Text -> m a -> m a

-- | A debug variant of <a>timedLog</a>.
timedDebug :: (MonadBaseControl IO m, MonadIO m) => Text -> m a -> m a
timedDebug' :: (MonadBaseControl IO m, MonadIO m) => Text -> m a -> m a
timedDebugS :: (MonadBaseControl IO m, MonadIO m) => Text -> Text -> m a -> m a
timedDebugS' :: (MonadBaseControl IO m, MonadIO m) => Text -> Text -> m a -> m a
timedDebugEnd :: (MonadBaseControl IO m, MonadIO m) => Text -> m a -> m a
timedDebugEnd' :: (MonadBaseControl IO m, MonadIO m) => Text -> m a -> m a
timedDebugEndS :: (MonadBaseControl IO m, MonadIO m) => Text -> Text -> m a -> m a
timedDebugEndS' :: (MonadBaseControl IO m, MonadIO m) => Text -> Text -> m a -> m a

-- | This function, or <a>withStderrLogging</a>, must be wrapped around
--   whatever region of your application intends to use logging. Typically
--   it would be wrapped around the body of <tt>main</tt>.
withStdoutLogging :: (MonadBaseControl IO m, MonadIO m) => m a -> m a
withStderrLogging :: (MonadBaseControl IO m, MonadIO m) => m a -> m a
withFileLogging :: (MonadBaseControl IO m, MonadIO m) => FilePath -> m a -> m a

-- | Flush all collected logging messages. This is automatically called by
--   <a>withStdoutLogging</a> and <a>withStderrLogging</a> when those
--   blocks are exited by whatever means.
flushLog :: MonadIO m => m ()
loggingLogger :: ToLogStr msg => LogLevel -> LogSource -> msg -> IO ()

-- | Set the verbosity level. Messages at our higher than this level are
--   displayed. It defaults to <a>LevelDebug</a>.
setLogLevel :: LogLevel -> IO ()

-- | Set the format used for log timestamps.
setLogTimeFormat :: String -> IO ()

-- | When printing <a>LevelDebug</a> messages, only display those matching
--   the given regexp applied to the Source parameter. Calls to
--   <a>debug</a> without a source parameter are regarded as having a
--   source of <tt>""</tt>.
setDebugSourceRegex :: String -> IO ()
data LogLevel
LevelDebug :: LogLevel
LevelInfo :: LogLevel
LevelWarn :: LogLevel
LevelError :: LogLevel
LevelOther :: Text -> LogLevel
instance GHC.Classes.Ord Control.Logging.LogLevel
instance GHC.Read.Read Control.Logging.LogLevel
instance GHC.Show.Show Control.Logging.LogLevel
instance GHC.Classes.Eq Control.Logging.LogLevel
